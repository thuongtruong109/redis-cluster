services:
  commander:
    image: rediscommander/redis-commander:latest
    container_name: commander
    volumes:
      - ./commander/config.json:/redis-commander/config/local-production.json
    ports:
      - "8081:8081"
    networks:
      - redisnet

  redis-master:
    image: redis:7.2
    container_name: redis-master
    command: ["redis-server", "/etc/redis/redis.conf"]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "masterpass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ./master/ha.conf:/etc/redis/redis.conf
      - master-data:/data
    ports:
      - "6379:6379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.10

  slave_1:
    image: redis:7.2
    container_name: slave_1
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./slave_1/redis.conf:/etc/redis/redis.conf
      - slave_1-data:/data
    depends_on:
      - redis-master
    ports:
      - "6380:6379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.11

  slave_2:
    image: redis:7.2
    container_name: slave_2
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./slave_2/redis.conf:/etc/redis/redis.conf
      - slave_2-data:/data
    depends_on:
      - redis-master
    ports:
      - "6381:6379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.12

  slave_3:
    image: redis:7.2
    container_name: slave_3
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - ./slave_3/redis.conf:/etc/redis/redis.conf
      - slave_3-data:/data
    depends_on:
      - redis-master
    ports:
      - "6382:6379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.13

  sentinel_1:
    image: redis:7.2
    container_name: sentinel_1
    command: ["redis-sentinel", "/etc/redis/sentinel.conf"]
    volumes:
      - ./sentinel_1/sentinel.conf:/etc/redis/sentinel.conf
    ports:
      - "26379:26379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.20
    restart: always
    depends_on:
      - redis-master

  sentinel_2:
    image: redis:7.2
    container_name: sentinel_2
    command: ["redis-sentinel", "/etc/redis/sentinel.conf"]
    volumes:
      - ./sentinel_2/sentinel.conf:/etc/redis/sentinel.conf
    ports:
      - "26380:26379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.21
    restart: always
    depends_on:
      - redis-master

  sentinel_3:
    image: redis:7.2
    container_name: sentinel_3
    command: ["redis-sentinel", "/etc/redis/sentinel.conf"]
    volumes:
      - ./sentinel_3/sentinel.conf:/etc/redis/sentinel.conf
    ports:
      - "26381:26379"
    networks:
      redisnet:
        ipv4_address: 172.28.0.22
    restart: always
    depends_on:
      - redis-master

  test:
    image: redis:7.2
    container_name: test
    depends_on:
      redis-master:
        condition: service_healthy
      slave_1:
        condition: service_started
    entrypoint: ["/bin/sh", "-c"]
    command: |
      until redis-cli -h redis-master -a masterpass ping | grep PONG; do sleep 1; done
      redis-cli -h redis-master -a masterpass set testkey testvalue
      _VALUE=$$(redis-cli -h redis-master -a masterpass get testkey)
      if [ "$$_VALUE" != "testvalue" ]; then
        echo "Master set/get failed"; exit 1
      fi
      _VALUE=$$(redis-cli -h slave_1 get testkey)
      if [ "$$_VALUE" != "testvalue" ]; then
        echo "Replication to slave_1 failed"; exit 1
      fi
      echo "All tests passed"
      exit 0
    networks:
      - redisnet

networks:
  redisnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  master-data:
  slave_1-data:
  slave_2-data:
  slave_3-data:
