name: Redis Replication CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker Compose file
        run: |
          docker compose config --quiet
          echo "✅ Docker Compose file is valid"

      - name: Check Redis configuration files
        run: |
          # Check if all required config files exist
          for config in master/ha.conf slave_1/redis.conf slave_2/redis.conf slave_3/redis.conf sentinel_1/sentinel.conf sentinel_2/sentinel.conf sentinel_3/sentinel.conf commander/config.json; do
            if [ ! -f "$config" ]; then
              echo "❌ Missing configuration file: $config"
              exit 1
            fi
          done
          echo "✅ All configuration files present"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          hide-progress: false
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint-and-validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: |
          pip install redis pytest pytest-asyncio pytest-timeout docker

      - name: Create test configuration files (if missing)
        run: |
          # Create basic configs for testing if they don't exist
          mkdir -p master slave_1 slave_2 slave_3 sentinel_1 sentinel_2 sentinel_3 commander

          # Master config
          if [ ! -f "master/ha.conf" ]; then
            cat > master/ha.conf << 'EOF'
          bind 0.0.0.0
          port 6379
          requirepass masterpass
          masterauth masterpass
          save 900 1
          save 300 10
          save 60 10000
          EOF
          fi

          # Slave configs
          for i in 1 2 3; do
            if [ ! -f "slave_$i/redis.conf" ]; then
              cat > slave_$i/redis.conf << 'EOF'
          bind 0.0.0.0
          port 6379
          replicaof 172.28.0.10 6379
          masterauth masterpass
          requirepass slavepass
          replica-read-only yes
          EOF
            fi
          done

          # Sentinel configs
          for i in 1 2 3; do
            port=$((26378 + i))
            if [ ! -f "sentinel_$i/sentinel.conf" ]; then
              cat > sentinel_$i/sentinel.conf << 'EOF'
          bind 0.0.0.0
          port 26379
          sentinel monitor mymaster 172.28.0.10 6379 2
          sentinel auth-pass mymaster masterpass
          sentinel down-after-milliseconds mymaster 5000
          sentinel failover-timeout mymaster 10000
          sentinel parallel-syncs mymaster 1
          EOF
            fi
          done

          # Commander config
          if [ ! -f "commander/config.json" ]; then
            cat > commander/config.json << 'EOF'
          {
            "redis": {
              "defaultLabel": "Redis Master",
              "connections": [
                {
                  "label": "Master",
                  "host": "172.28.0.10",
                  "port": 6379,
                  "password": "masterpass"
                }
              ]
            }
          }
          EOF
          fi

      - name: Start Redis cluster
        run: |
          docker compose up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          # Wait for master to be ready
          timeout 60 bash -c 'until docker exec redis-master redis-cli -a masterpass ping; do sleep 2; done'

          # Wait for slaves to be ready
          for i in 1 2 3; do
            timeout 60 bash -c "until docker exec slave_$i redis-cli -a slavepass ping; do sleep 2; done"
          done

          # Wait for sentinels to be ready
          for i in 1 2 3; do
            timeout 60 bash -c "until docker exec sentinel_$i redis-cli -p 26379 ping; do sleep 2; done"
          done

      - name: Run integration tests
        run: |
          python -m pytest tests/ -v --timeout=300

      - name: Run replication tests
        run: |
          # Test write to master, read from slaves
          docker exec redis-master redis-cli -a masterpass set test_key "test_value"
          sleep 2

          for i in 1 2 3; do
            echo "Testing slave_$i replication..."
            result=$(docker exec slave_$i redis-cli -a slavepass get test_key)
            if [ "$result" != "test_value" ]; then
              echo "❌ Replication failed on slave_$i"
              exit 1
            fi
          done
          echo "✅ Replication test passed"

      - name: Run sentinel tests
        run: |
          # Test sentinel master discovery
          for i in 1 2 3; do
            echo "Testing sentinel_$i..."
            master_info=$(docker exec sentinel_$i redis-cli -p 26379 sentinel masters)
            echo "Sentinel $i master info: $master_info"
          done

      - name: Run failover simulation
        run: |
          echo "🔄 Simulating master failover..."

          # Stop master
          docker stop redis-master
          sleep 15

          # Check if sentinels promoted a new master
          for i in 1 2 3; do
            echo "Checking sentinel_$i for new master..."
            docker exec sentinel_$i redis-cli -p 26379 sentinel masters || true
          done

          # Restart original master
          docker start redis-master
          sleep 10

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker compose logs

          echo "=== Container Status ==="
          docker compose ps

          echo "=== Network Status ==="
          docker network ls
          docker network inspect redis-replication_redisnet || true

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install redis-benchmark
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
